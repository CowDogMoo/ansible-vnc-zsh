---
- name: Include OS-Specific variables
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yaml"

- name: Include OS-Specific tasks
  ansible.builtin.include_tasks: "{{ ansible_os_family }}.yaml"

- name: Install vncpwd
  include: vncpwd.yaml

- name: Create {{ vnc_users }}
  become: yes
  ansible.builtin.user:
    name: "{{ item.username }}"
    shell: /bin/zsh
  with_items: "{{ vnc_users }}"

- name: Create .vnc dirs
  ansible.builtin.file:
    path: "/home/{{ item.username }}/.vnc"
    state: directory
    mode: 0700
    owner: "{{ item.username }}"
    group: "{{ item.usergroup | default(item.username) }}"
  changed_when: false
  with_items: "{{ vnc_users }}"

- name: Generate random passwords for each user in {{ vnc_users }} with vnc_pw.py
  vnc_pw:
    vnc_users: "{{ vnc_users }}"
  register: updated_data

- name: Update {{ vnc_users }} with the random generated passwords
  ansible.builtin.set_fact:
    vnc_users_pw: "{{ vnc_users_pw | default([]) + [item] }}"
    # Make fact available to other roles
    cacheable: yes
  with_items: "{{ updated_data.result }}"

- name: Set random password for {{ vnc_users_pw }} if one isn't already set
  ansible.builtin.shell: |
    set -o pipefail
    if [[ ! -f /home/{{ item.username }}/.vnc/passwd ]]; then
      printf "{{ item.pass }}\n{{ item.pass }}\n\n" | vncpasswd /home/{{ item.username }}/.vnc/passwd
    fi
  args:
    chdir: "/home/{{ item.username }}/.vnc"
    # Make sure vncpasswd isn't overwritten - we don't want an ansible run to interrupt an interview
    creates: "/home/{{ item.username }}/.vnc/passwd"
    executable: /usr/bin/zsh
  with_items: "{{ vnc_users_pw }}"

- name: Set perms on vnc passwords
  ansible.builtin.file:
    path: "/home/{{ item.username }}/.vnc/passwd"
    owner: "{{ item.username }}"
    group: "{{ item.usergroup | default(item.username) }}"
    mode: 0700
  with_items: "{{ vnc_users }}"

- name: Configure systemd auto-start service
  include: systemd.yaml
  when: var.setup_systemd is true

- name: Start vncserver
  ansible.builtin.command: "/usr/bin/vncserver :{{ item.vnc_num }} {{ var.vnc_client_options }}"
  become: true
  become_user: "{{ item.username }}"
  when: var.setup_systemd is false
  with_items: "{{ vnc_users }}"

# TODO: Should all go to a zshrc ansible role
- name: Create base .zshrc files
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/templates/zshrc.zsh-template"
    dest: "/home/{{ item.username }}/.zshrc"
    mode: 644
    owner: "{{ item.username }}"
    group: "{{ item.usergroup | default(item.username) }}"
  changed_when: false
  with_items: "{{ vnc_users }}"

- name: Download {{ var.omz_install_script_url }}
  ansible.builtin.get_url:
    url: "https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh"
    dest: "/tmp/zsh-installer.sh"
    mode: 0755
  when: var.omz_install_script_url is defined
  changed_when: false

- name: Run {{ var.omz_install_script_url }}
  ansible.builtin.command: "/tmp/oh-my-zsh-installer.sh"
  register: command_result
  changed_when: "'is up-to-date' not in command_result.stdout"
  when: var.omz_install_script_url is defined
  args:
    chdir: /tmp/
  with_items: "{{ vnc_users }}"

- name: Remove the zsh-installer.sh
  ansible.builtin.file:
    path: /tmp/oh-my-zsh-installer.sh
    state: absent
# END TODO
